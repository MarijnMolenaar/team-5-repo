const humansection = document.querySelector(".profile-human"),
    animalsection = document.querySelector(".profile-animal");

function HumanProfile() {
    humansection.style.display = "block", animalsection.style.display = "none", document.querySelector(".humanbutton > img").classList.add("activebutton"), document.querySelector(".animalbutton > img").classList.remove("activebutton")
}

function AnimalProfile() {
    humansection.style.display = "none", animalsection.style.display = "block", document.querySelector(".animalbutton > img").classList.add("activebutton"), document.querySelector(".humanbutton > img").classList.remove("activebutton")
}
window.addEventListener("load", e => {
    HumanProfile(), e.preventDefault()
}, !1), document.querySelector(".humanbutton").addEventListener("click", e => {
    HumanProfile(), e.preventDefault()
}, !1), document.querySelector(".animalbutton").addEventListener("click", e => {
    AnimalProfile(), e.preventDefault()
}, !1), document.getElementById("discoverpage").classList.add("active");
const divhumanedit = document.querySelector(".HumanProfileEdit"),
    divanimaledit = document.querySelector(".AnimalProfileEdit");

function HumanProfileEdit() {
    divhumanedit.style.display = "block", divanimaledit.style.display = "none", document.querySelector(".hprofe > img").classList.add("activebutton"), document.querySelector(".aprofe > img").classList.remove("activebutton")
}

function AnimalProfileEdit() {
    divhumanedit.style.display = "none", divanimaledit.style.display = "block", document.querySelector(".hprofe > img").classList.add("activebutton"), document.querySelector(".aprofe > img").classList.remove("activebutton")
}
HumanProfileEdit(), document.querySelector(".hprofe").addEventListener("click", e => {
    HumanProfileEdit(), e.preventDefault()
}, !1), document.querySelector(".aprofe").addEventListener("click", e => {
    AnimalProfileEdit(), e.preventDefault()
}, !1), document.addEventListener("DOMContentLoaded", () => {
    const n = document.getElementById("country");
    fetch("https://restcountries.com/v2/all").then(e => e.json()).then(e => {
        let t = "";
        e.forEach(e => {
            t += `<option>${e.name}</option>`
        }), n.innerHTML = t
    }).catch(e => {
        console.log(e)
    })
});
const selectedCountry = localStorage.getItem("selectedCountry"),
    array = (document.getElementById("country").value = selectedCountry, localStorage.getItem("myArray")),
    interestarray = JSON.parse(array),
    interests = ["Travel", "Dogs", "Cooking", "Surfing", "Politics", "Cats", "Fitness", "Reading", "Netflix", "Partying"];
interests.forEach(e => {
    1 == interestarray.includes(e) ? document.getElementById(e).checked = !0 : document.getElementById(e).checked = !1
}), document.getElementById("profilepage").classList.add("active");
document.addEventListener("DOMContentLoaded", () => {
    const n = document.getElementById("country_filter");
    fetch("https://restcountries.com/v2/all").then(e => e.json()).then(e => {
        let t = "";
        e.forEach(e => {
            t += `<option>${e.name}</option>`
        }), n.innerHTML = t
    }).catch(e => {
        console.log(e)
    })
}), document.getElementById("discoverpage").classList.add("active");
const h2check = document.getElementById("h2check"),
    homebutton = document.getElementById("homemessage");
homebutton.addEventListener("click", () => {
    window.location.href = "profile"
}), document.getElementById("homepage").classList.add("active");
const humansection = document.querySelector(".profile-human"),
    animalsection = document.querySelector(".profile-animal");

function HumanProfile() {
    humansection.style.display = "block", animalsection.style.display = "none", document.querySelector(".humanbutton > img").classList.add("activebutton"), document.querySelector(".animalbutton > img").classList.remove("activebutton")
}

function AnimalProfile() {
    humansection.style.display = "none", animalsection.style.display = "block", document.querySelector(".animalbutton > img").classList.add("activebutton"), document.querySelector(".humanbutton > img").classList.remove("activebutton")
}
window.addEventListener("load", e => {
    HumanProfile(), e.preventDefault()
}, !1), document.querySelector(".humanbutton").addEventListener("click", e => {
    HumanProfile(), e.preventDefault()
}, !1), document.querySelector(".animalbutton").addEventListener("click", e => {
    AnimalProfile(), e.preventDefault()
}, !1), document.getElementById("likespage").classList.add("active");
document.getElementById("likespage").classList.add("active");
const human = document.querySelector(".HumanProfile"),
    animal = document.querySelector(".AnimalProfile");

function HumanProfile() {
    human.style.display = "block", animal.style.display = "none", document.querySelector(".hprofe > img").classList.add("activebutton"), document.querySelector(".aprofe > img").classList.remove("activebutton")
}

function AnimalProfile() {
    human.style.display = "none", animal.style.display = "block", document.querySelector(".hprofe > img").classList.add("activebutton"), document.querySelector(".aprofe > img").classList.remove("activebutton")
}
HumanProfile(), document.querySelector(".hprofe").addEventListener("click", e => {
    HumanProfile(), e.preventDefault()
}, !1), document.querySelector(".aprofe").addEventListener("click", e => {
    AnimalProfile(), e.preventDefault()
}, !1);
const loadFile = function (e) {
    const t = document.getElementById("previewphoto");
    t.src = URL.createObjectURL(e.target.files[0])
};
document.addEventListener("DOMContentLoaded", () => {
    const o = document.getElementById("country");
    fetch("https://restcountries.com/v2/all").then(e => e.json()).then(e => {
        let t = "";
        e.forEach(e => {
            t += `<option>${e.name}</option>`
        }), o.innerHTML = t
    }).catch(e => {
        console.log(e)
    })
});
const humansection = document.querySelector(".profile-human"),
    animalsection = document.querySelector(".profile-animal");

function HumanProfile() {
    humansection.style.display = "block", animalsection.style.display = "none", document.querySelector(".humanbutton > img").classList.add("activebutton"), document.querySelector(".animalbutton > img").classList.remove("activebutton")
}

function AnimalProfile() {
    humansection.style.display = "none", animalsection.style.display = "block", document.querySelector(".animalbutton > img").classList.add("activebutton"), document.querySelector(".humanbutton > img").classList.remove("activebutton")
}
window.addEventListener("load", e => {
    HumanProfile(), e.preventDefault()
}, !1), document.querySelector(".humanbutton").addEventListener("click", e => {
    HumanProfile(), e.preventDefault()
}, !1), document.querySelector(".animalbutton").addEventListener("click", e => {
    AnimalProfile(), e.preventDefault()
}, !1);
const selectedCountry = document.querySelector(".profile-human p:first-of-type").innerText,
    ul = (localStorage.setItem("selectedCountry", selectedCountry), document.querySelector(".profile-human ul")),
    children = ul.children;
let interestarray = [];
Array.from(children).forEach(e => {
    interestarray.push(e.innerText)
}), localStorage.setItem("myArray", JSON.stringify(interestarray)), document.getElementById("profilepage").classList.add("active");
//# sourceMappingURL=data:application/json;charset=utf8;base64,